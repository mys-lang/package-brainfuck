from string import StringReader
from os import STDIN
from os import STDOUT
from os import Stdin
from os import Stdout

class _Tape:
    tape: [i32]
    pos: u64

    def __init__(self):
        self.tape = [0]
        self.pos = 0

    def get(self) -> i32:
        return self.tape[self.pos]

    def put(self, value: i32):
        self.tape[self.pos] = value

    def inc(self, value: i32):
        self.tape[self.pos] += value

    def move(self, value: i32):
        self.pos += u64(value)

        while self.pos >= len(self.tape):
            self.tape.append(0)

@trait
class _Op:

    def execute(self, tape: _Tape):
        pass

class _Inc(_Op):
    val: i32

    def execute(self, tape: _Tape):
        tape.inc(self.val)

class _Move(_Op):
    val: i32

    def execute(self, tape: _Tape):
        tape.move(self.val)

class _Write(_Op):

    def execute(self, tape: _Tape):
        STDOUT.put(u8(tape.get()))
        STDOUT.flush()

class _Read(_Op):

    def execute(self, tape: _Tape):
        tape.put(i32(STDIN.get()))


class _Loop(_Op):
    ops: [_Op]

    def execute(self, tape: _Tape):
        while tape.get() > 0:
            _run(self.ops, tape)

def _parse(source: StringReader) -> [_Op]:
    ops: [_Op] = []

    while True:
        match source.get():
            case '+':
                ops.append(_Inc(1))
            case '-':
                ops.append(_Inc(-1))
            case '>':
                ops.append(_Move(1))
            case '<':
                ops.append(_Move(-1))
            case '.':
                ops.append(_Write())
            case ',':
                ops.append(_Read())
            case '[':
                ops.append(_Loop(_parse(source)))
            case ']':
                break
            case '':
                break

    return ops

def _run(ops: [_Op], tape: _Tape):
    for op in ops:
        op.execute(tape)

def execute(program: string):
    """Execute given program.

    """

    ops = _parse(StringReader(program))
    _run(ops, _Tape())
