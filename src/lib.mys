from os import STDIN
from os import STDOUT
from os import Stdin
from os import Stdout
from string import StringReader

class _Tape:
    tape: [u8]
    pos: i64

    func __init__(self):
        self.tape = [0]
        self.pos = 0

    func get(self) -> u8:
        return self.tape[self.pos]

    func put(self, value: u8):
        self.tape[self.pos] = value

    func increment(self):
        self.tape[self.pos] += 1

    func decrement(self):
        self.tape[self.pos] -= 1

    func move_right(self):
        self.pos += 1

        if self.pos >= self.tape.length():
            self.tape.append(0)

    func move_left(self):
        self.pos -= 1

trait _Op:

    func execute(self, tape: _Tape):
        pass

class _Increment(_Op):

    func execute(self, tape: _Tape):
        tape.increment()

class _Decrement(_Op):

    func execute(self, tape: _Tape):
        tape.decrement()

class _MoveRight(_Op):

    func execute(self, tape: _Tape):
        tape.move_right()

class _MoveLeft(_Op):

    func execute(self, tape: _Tape):
        tape.move_left()

class _Output(_Op):

    func execute(self, tape: _Tape):
        STDOUT.put(u8(tape.get()))
        STDOUT.flush()

class _Input(_Op):

    func execute(self, tape: _Tape):
        tape.put(u8(STDIN.get()))

class _Loop(_Op):
    ops: [_Op]

    func execute(self, tape: _Tape):
        while tape.get() > 0:
            _run(self.ops, tape)

func _parse(source: StringReader) -> [_Op]:
    ops: [_Op] = []

    while True:
        match source.get():
            case '+':
                op = _Increment()
            case '-':
                op = _Decrement()
            case '>':
                op = _MoveRight()
            case '<':
                op = _MoveLeft()
            case '.':
                op = _Output()
            case ',':
                op = _Input()
            case '[':
                op = _Loop(_parse(source))
            case ']':
                break
            case '':
                break

        ops.append(op)

    return ops

func _run(ops: [_Op], tape: _Tape):
    for op in ops:
        op.execute(tape)

func execute(program: string):
    """Execute given program.

    """

    ops = _parse(StringReader(program))
    _run(ops, _Tape())

test increment():
    inc = _Increment()
    tape = _Tape()

    tape.put(3)
    inc.execute(tape)
    assert tape.get() == 4

    tape.put(254)
    inc.execute(tape)
    assert tape.get() == 255

    inc.execute(tape)
    assert tape.get() == 0

test decrement():
    dec = _Decrement()
    tape = _Tape()

    tape.put(2)
    dec.execute(tape)
    assert tape.get() == 1

    dec.execute(tape)
    assert tape.get() == 0

    dec.execute(tape)
    assert tape.get() == 255
